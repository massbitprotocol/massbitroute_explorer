#!/bin/bash
TYPE="stat"

SITE_ROOT=$(realpath $(dirname $(realpath $0))/..)

export HOME=$SITE_ROOT
ROOT_DIR=$SITE_ROOT

source $SITE_ROOT/scripts/base.sh

cd $SITE_ROOT

mbr_root=/massbit/massbitroute/app
service_dir=$mbr_root/src/sites/services

ASDF=$SITE_ROOT/bin/.asdf/installs
LOKI=$ASDF/loki/v2.6.1/bin/loki
_repo() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PUBLIC_URL" ]; then
		echo "GIT_PUBLIC_URL missing"
		exit 1
	fi

	export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}
	export SSL_BRANCH=${SSL_BRANCH:-$MBR_ENV}
	export STAT_BRANCH=${STAT_BRANCH:-$MBR_ENV}
	export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}
	REPOS=""
}

_repo_private() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "GIT_PRIVATE_READ_URL missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_BRANCH" ]; then
		echo "GIT_PRIVATE_BRANCH missing"
		exit 1
	fi

	export MKAGENT_BRANCH=${MKAGENT_BRANCH:-$MBR_ENV}

	export GBC_BRANCH=${GBC_BRANCH:-$MBR_ENV}
	export ASDF_BRANCH=${ASDF_BRANCH:-$MBR_ENV}

	export ENV_BRANCH=${ENV_BRANCH:-$GIT_PRIVATE_BRANCH}
	export SSL_BRANCH=${SSL_BRANCH:-$GIT_PRIVATE_BRANCH}

	_env
	REPOS_PRIVATE="\
$SITE_ROOT/env|$GIT_PRIVATE_READ_URL/massbitroute/env.git|$ENV_BRANCH \
/etc/letsencrypt|$GIT_PRIVATE_READ_URL/massbitroute/ssl.git|$SSL_BRANCH \
"
	REPOS_RUNTIME="\ 

"
}

_prepare() {
	echo "Prepare"
	mkdir -p \
		$SITE_ROOT/logs/nginx \
		$SITE_ROOT/db \
		$SITE_ROOT/tmp \
		$SITE_ROOT/db

}
_install_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	_repo
	_install_sources $REPOS
	_install_status=$?
	return $_install_status
}

_update_repos() {
	if [ -z "$MBR_ENV" ]; then
		echo "MBR_ENV missing"
		exit 1
	fi
	if [ -z "$GIT_PRIVATE_READ_URL" ]; then
		echo "Need GIT_PRIVATE_READ_URL"
		exit 1
	fi
	_repo_private
	_update_sources $REPOS_PRIVATE
	_update_status=$?
	_update_sources $REPOS_RUNTIME
	if [ $_update_status -eq 0 ]; then
		_update_status=$?
	fi
	return $_update_status
}

_supervisor() {
	ln -sf /massbit/massbitroute/app/gbc /massbit/massbitroute/app/src/gbc
	ln -sf /massbit/massbitroute/app/gbc/bin/openresty /usr/local/openresty
	# apt-get update
	# apt-get install -y git apache2-utils supervisor jq python-is-python2 libssl-dev \
	# 	liburcu-dev libev-dev libsodium-dev libtool libunwind-dev libmaxminddb-dev

	if [ -f "/usr/bin/systemctl" ]; then

		systemctl enable supervisor
		systemctl start supervisor

	fi
	mkdir -p /etc/supervisor/conf.d
	cp supervisor.conf /etc/supervisor/conf.d/${TYPE}.conf
	if [ "$MBR_MODE" != "docker" ]; then
		supervisorctl update
	fi
}
_install_one() {
	_prepare
	_install_repos
}
_install() {
	_install_one
	_supervisor
}

_service_loki() {
	sed "s/_SITE_ROOT_/$SITE_ROOT/g" $SITE_ROOT/etc/loki/config_tmpl.yaml >$SITE_ROOT/etc/loki/config.yaml
	$LOKI --config.file=$SITE_ROOT/etc/loki/config.yaml
}
_service_grafana() {
	sed "s/_SITE_ROOT_/$SITE_ROOT/g" $SITE_ROOT/etc/grafana/config_tmpl.ini >$SITE_ROOT/etc/grafana/config.ini
	$GRAFANA_DIR/bin/grafana-server -config $SITE_ROOT/etc/grafana/config.ini
}

_reload() {
	pkill -f push.py
	#	curl -X POST http://127.0.0.1:44444/__internal_prometheus/-/reload

	$SITE_ROOT/cmd_server _update
	$SITE_ROOT/cmd_server update
	$SITE_ROOT/cmd_server start all
}

_save_env() {
	if [ \( -z "$EXPLORER_TYPE" \) -o \( -z "$EXPLORER_NETWORK" \) -o \( -z "$EXPLORER_BLOCKCHAIN" \) ]; then
		echo "EXPLORER_TYPE or EXPLORER_NETWORK or EXPLORER_BLOCKCHAIN missing"
		exit 1
	fi

	if [ -n "$EXPLORER_TYPE" ]; then echo $EXPLORER_TYPE >$SITE_ROOT/vars/EXPLORER_TYPE; fi
	if [ -n "$EXPLORER_NETWORK" ]; then echo $EXPLORER_NETWORK >$SITE_ROOT/vars/EXPLORER_NETWORK; fi
	if [ -n "$EXPLORER_BLOCKCHAIN" ]; then echo $EXPLORER_BLOCKCHAIN >$SITE_ROOT/vars/EXPLORER_BLOCKCHAIN; fi
}

_update_tag() {
	PORTAL_DOMAIN=portal.$DOMAIN
	git="git -C $SITE_ROOT"
	_v=$($git config --get remote.origin.url | awk -F'/' '{print $NF}')
	tmp=$(mktemp)
	curl -sfkL http://$PORTAL_DOMAIN/deploy/info/version/$_v >$tmp
	if [ $? -ne 0 ]; then
		rm $tmp
		return 0
	fi

	_tag=$(cat $tmp)

	rm $tmp

	_my_tag=$($git describe --tags)
	_tag_update=0
	if [ "$_tag" != "$_my_tag" ]; then
		$git fetch --all --tags --prune
		$git checkout $_tag
		_tag_update=1
	fi

	return $_tag_update

}

_update() {
	echo "Update"

	_save_env

	# _discover_host
	_update_repos
	_st_update=$?

	_update_tag
	if [ $_st_update -eq 0 ]; then
		_st_update=$?
	fi
	# _rebuild_conf
	return $_st_update
}

_monitor() {
	_update
	is_reload=$?

	if [ $is_reload -ne 0 ]; then
		$0 _reload
	fi
}

_run() {
	rm -rf $SITE_ROOT/tmp/*
	_update
	$SITE_ROOT/start_server
}

$@
